{'TMP': 'C:\\Users\\Don\\AppData\\Local\\Temp', 'COMPUTERNAME': 'DON-DEMOTPAD', 'USERDOMAIN': 'Don-DEMOTPAD', 'EMC_AUTOPLAY': 'C:\\Program Files (x86)\\Common Files\\Roxio Shared\\', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 37 Stepping 5, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files (x86)', 'PROCESSOR_REVISION': '2505', 'PATH': 'C:\\Python27\\;C:\\Python27\\Scripts;C:\\Program Files\\Common Files\\Microsoft Shared\\Windows Live;C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\Windows Live;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\Intel\\WiFi\\bin\\;C:\\Program Files\\Common Files\\Intel\\WirelessCommon\\;C:\\Program Files (x86)\\Common Files\\Lenovo;C:\\Program Files (x86)\\Common Files\\Ulead Systems\\MPEG;C:\\Program Files (x86)\\Lenovo\\Access Connections\\;C:\\Program Files (x86)\\Windows Live\\Shared;C:\\Program Files (x86)\\Common Files\\Acronis\\SnapAPI\\;C:\\Program Files (x86)\\Common Files\\Avid;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\DLLShared\\;C:\\Program Files (x86)\\Common Files\\Roxio Shared\\10.0\\DLLShared\\;C:\\Program Files (x86)\\Avaya\\Avaya Virtual Console\\;C:\\Program Files (x86)\\QuickTime\\QTSystem\\', 'SYSTEMROOT': 'C:\\Windows', 'TSMPATH': 'C:\\Program Files\\ThinkPad\\UltraNav Utility', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TVTPYDIR': 'C:\\Program Files (x86)\\Common Files\\Lenovo\\Python24', 'ACPATH': 'C:\\Program Files (x86)\\Lenovo\\Access Connections\\', 'RR': 'C:\\Program Files (x86)\\Lenovo\\Rescue and Recovery', 'TVT': 'C:\\Program Files (x86)\\Lenovo', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'PROCESSOR_ARCHITECTURE': 'x86', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'GRANDE': 'C:\\Program Files (x86)\\Dell Printers\\Dell 1355 Multifunction Color Printer\\Status Monitor', 'LOCALAPPDATA': 'C:\\Users\\Don\\AppData\\Local', 'HOMEPATH': '\\Users\\Don', 'PROGRAMW6432': 'C:\\Program Files', 'USERNAME': 'Don', 'LOGONSERVER': '\\\\DON-DEMOTPAD', 'PROMPT': '$P$G', 'SESSIONNAME': 'Console', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'CONFIGSETROOT': 'C:\\Windows\\ConfigSetRoot', 'SWSHARE': 'C:\\SWSHARE', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'TEMP': 'C:\\Users\\Don\\AppData\\Local\\Temp', 'HOMEDRIVE': 'C:', 'OS': 'Windows_NT', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '4', 'APPDATA': 'C:\\Users\\Don\\AppData\\Roaming', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_ARCHITEW6432': 'AMD64', 'ROXIOCENTRAL': 'C:\\Program Files (x86)\\Common Files\\Roxio Shared\\10.0\\Roxio Central36\\', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'TVTCOMMON': 'C:\\Program Files (x86)\\Common Files\\Lenovo', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\Don'}